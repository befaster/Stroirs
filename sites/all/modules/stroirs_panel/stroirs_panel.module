<?php

function stroirs_panel_init() {
    drupal_add_js(drupal_get_path('module', 'stroirs_panel') . '/js/jquery.slidePanel.js');
    drupal_add_js(drupal_get_path('module', 'stroirs_panel') . '/js/stroirs_panel.js');
    drupal_add_css(drupal_get_path('module', 'stroirs_panel') . '/css/stroirs_panel.css', array('group' => CSS_THEME, 'preprocess' => FALSE));
}

/**
 * Implements of hook_menu()
 */
/*
  function stroirs_panel_menu() {
  $items = array();

  $items['stroirs_panel/panel'] = array(
  'page callback' => 'drupal_get_form',
  'page arguments' => array('stroirs_panel_form'),
  'access arguments' => array('access content'),
  'type' => MENU_CALLBACK,
  );

  return $items;
  } */

/**
 * Implementation of hook_theme()
 */
function stroirs_panel_theme() {
    $path = drupal_get_path('module', 'stroirs_panel') . '/templates';

    return array(
        'stroirs_panel_main_block_theme' => array(
            'arguments' => array(),
            'template' => 'stroirs_panel_main_block',
            'path' => $path,
        ),
    );
}

/**
 * Implements hook_block_info().
 */
function stroirs_panel_block_info() {
    $blocks['stroirs_panel_main_panel'] = array(
        'info' => t('Stroirs Main Panel'),
        'cache' => DRUPAL_NO_CACHE
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function stroirs_panel_block_view($delta = '') {
    $block = array();
    switch ($delta) {
        case 'stroirs_panel_main_panel':
            $form = drupal_get_form('stroirs_panel_form');
            $block['subject'] = t('Stroirs Main Panel');
            $block['content'] = theme('stroirs_panel_main_block_theme', array('form' => $form));
            break;
        default:
            break;
    }
    return $block;
}

function stroirs_panel_form_ajax_callback($form, $form_state) {
    return $form;
}

function stroirs_panel_form($form, &$form_state) {

    $form['#prefix'] = '<div id="stroirs-panel-form-wrapper">';
    $form['#suffix'] = '</div>';

    $form['#tree'] = TRUE;

    $step = empty($form_state['storage']['step']) ? 1 : $form_state['storage']['step'];
    $form_state['storage']['step'] = $step;

    $stroimaterial_vocabulary = taxonomy_vocabulary_machine_name_load('stoimaterial');

    if (!empty($stroimaterial_vocabulary->vid)) {
        $stroimaterial_details = taxonomy_get_tree($stroimaterial_vocabulary->vid);

        if (!empty($stroimaterial_details) && count($stroimaterial_details)) {
            $names = array();
            foreach ($stroimaterial_details as $material) {
                $names[$material->tid] = $material->name;
            }
        } else {
            return;
        }
    } else {
        return;
    }

    switch ($step) {
        case 1:
            $form['step1'] = array(
                '#type' => 'fieldset',
                '#title' => '',
            );

            $form['step1']['material_name'] = array(
                '#type' => 'radios',
                '#required' => TRUE,
                '#title' => 'Выберите перевозимый груз',
                '#options' => $names,
                '#default_value' => 0,
                '#attributes' => array(
                    'onchange' => ""
                )
            );

            if (isset($form_state['values']['step1']['material_name'])) {
                $form['step1']['name']['#default_value'] = $form_state['values']['step1']['material_name'];
            }
            break;
        case 2:
            $form['step2'] = array(
                '#type' => 'fieldset',
                '#title' => ''
            );

            $dostavka = false;
            $material_params = taxonomy_term_load($form_state['values']['step1']['material_name']);

            if (empty($material_params->name)) {
                return;
            }

            switch ($material_params->name) {
                case 'Песок':
                case 'Чернозем':
                case 'Навоз/перегной':
                    $type_avto_options = array();
                    if (!empty($material_params->field_stoimaterial_type_avto[LANGUAGE_NONE]) && count($material_params->field_stoimaterial_type_avto[LANGUAGE_NONE])) {


                        foreach ($material_params->field_stoimaterial_type_avto[LANGUAGE_NONE] as $value) {
                            $entity_details = entity_load('field_collection_item', array($value['value']));

                            if (!empty($entity_details[$value['value']]->field_sta_name[LANGUAGE_NONE][0]['value'])) {
                                $type_avto_options[$value['value']] = $entity_details[$value['value']]->field_sta_name[LANGUAGE_NONE][0]['value'];
                            }
                        }
                    }

                    $default_value = empty($form_state['values']['step2']['type_avto']) ? '' : $form_state['values']['step2']['type_avto'];

                    $form['step2']['type_avto'] = array(
                        '#type' => 'radios',
                        '#title' => 'Выберите тип авто',
                        '#default_value' => $default_value,
                        '#options' => $type_avto_options,
                        '#required' => TRUE,
                    );

                    $dostavka = true;
                    break;
                case 'Гранотсев':
                case 'Керамзит':
                    $kol_kubov_options = array();
                    if (!empty($material_params->field_stoimaterial_kol_kubov[LANGUAGE_NONE]) && count($material_params->field_stoimaterial_kol_kubov[LANGUAGE_NONE])) {

                        foreach ($material_params->field_stoimaterial_kol_kubov[LANGUAGE_NONE] as $value) {
                            $entity_details = entity_load('field_collection_item', array($value['value']));

                            if (!empty($entity_details[$value['value']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'])) {
                                $kol_kubov_options[$value['value']] = $entity_details[$value['value']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'];
                            }
                        }
                    }

                    $default_value = empty($form_state['values']['step2']['kol_kubov_options']) ? '' : $form_state['values']['step2']['kol_kubov_options'];

                    $form['step2']['kol_kubov_options'] = array(
                        '#type' => 'radios',
                        '#title' => 'Количество кубов',
                        '#default_value' => $default_value,
                        '#options' => $kol_kubov_options,
                        '#required' => TRUE,
                    );

                    $dostavka = true;
                    break;
                case 'Щебень':
                    $size_options = array();
                    if (!empty($material_params->field_stoimaterial_size[LANGUAGE_NONE]) && count($material_params->field_stoimaterial_size[LANGUAGE_NONE])) {

                        foreach ($material_params->field_stoimaterial_size[LANGUAGE_NONE] as $value) {
                            $entity_details = entity_load('field_collection_item', array($value['value']));

                            if (!empty($entity_details[$value['value']]->field_ss_name[LANGUAGE_NONE][0]['value'])) {
                                $size_options[$value['value']] = $entity_details[$value['value']]->field_ss_name[LANGUAGE_NONE][0]['value'];
                            }
                        }
                    }

                    $size_default_value = empty($form_state['values']['step2']['size_options']) ? '' : $form_state['values']['step2']['size_options'];
                    $form['step2']['size_options'] = array(
                        '#type' => 'radios',
                        '#title' => 'Размер',
                        '#default_value' => $size_default_value,
                        '#options' => $size_options,
                        '#required' => TRUE,
                    );

                    $kol_kubov_options = array();
                    if (!empty($material_params->field_stoimaterial_kol_kubov[LANGUAGE_NONE]) && count($material_params->field_stoimaterial_kol_kubov[LANGUAGE_NONE])) {

                        foreach ($material_params->field_stoimaterial_kol_kubov[LANGUAGE_NONE] as $value) {
                            $entity_details = entity_load('field_collection_item', array($value['value']));

                            if (!empty($entity_details[$value['value']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'])) {
                                $kol_kubov_options[$value['value']] = $entity_details[$value['value']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'];
                            }
                        }
                    }

                    $kol_kubov_default_value = empty($form_state['values']['step2']['kol_kubov_options']) ? '' : $form_state['values']['step2']['kol_kubov_options'];
                    $form['step2']['kol_kubov_options'] = array(
                        '#type' => 'radios',
                        '#title' => 'Количество кубов',
                        '#default_value' => $kol_kubov_default_value,
                        '#options' => $kol_kubov_options,
                        '#required' => TRUE,
                    );

                    $dostavka = true;
                    break;
                case 'Цемент':
                    $size_options = array();
                    if (!empty($material_params->field_stoimaterial_size[LANGUAGE_NONE]) && count($material_params->field_stoimaterial_size[LANGUAGE_NONE])) {

                        foreach ($material_params->field_stoimaterial_size[LANGUAGE_NONE] as $value) {
                            $entity_details = entity_load('field_collection_item', array($value['value']));

                            if (!empty($entity_details[$value['value']]->field_ss_name[LANGUAGE_NONE][0]['value'])) {
                                $size_options[$value['value']] = $entity_details[$value['value']]->field_ss_name[LANGUAGE_NONE][0]['value'];
                            }
                        }
                    }

                    $size_default_value = empty($form_state['values']['step2']['size_options']) ? '' : $form_state['values']['step2']['size_options'];
                    $form['step2']['size_options'] = array(
                        '#type' => 'radios',
                        '#title' => 'Размер',
                        '#default_value' => $size_default_value,
                        '#options' => $size_options,
                        '#required' => TRUE,
                    );

                    $kol_meshkov_default_value = empty($form_state['values']['step2']['kol_meshkov_options']) ? '' : $form_state['values']['step2']['kol_meshkov_options'];
                    $form['step2']['kol_meshkov_options'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Количество мешков',
                        '#default_value' => $kol_meshkov_default_value,
                        '#size' => 10,
                        '#descripton' => 'от 10 до 200',
                        '#required' => TRUE,
                    );

                    $dostavka = true;
                    break;
                default:
                    drupal_set_message(t('Для выбраного строиматериала услуга временно не доступна'), 'warning');
                    break;
            }

            if ($dostavka) {
                $form['step2']['dostavka_za_gorod'] = array(
                    '#type' => 'checkbox',
                    '#title' => 'Доставка за город',
                );

                $form['step2']['distance'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Расстояние от окружной'),
                    '#field_suffix' => 'км',
                    '#size' => 10,
                    '#states' => array(
                        'visible' => array(
                            'input[name="step2[dostavka_za_gorod]"]' => array('checked' => true)
                        )
                    ),
                );
            }
            break;

        case 3:
            $form['step3'] = array(
                '#type' => 'fieldset',
                '#title' => '',
            );

            $material_params = taxonomy_term_load($form_state['storage']['values']['step1']['material_name']);

            if (empty($material_params->name)) {
                return;
            }

            $result = array();
            
            switch ($material_params->name) {
                case 'Песок':
                case 'Чернозем':
                case 'Навоз/перегной':
                    $entity_details = entity_load('field_collection_item', array($form_state['values']['step2']['type_avto']));

                    if (!empty($entity_details[$form_state['values']['step2']['type_avto']]->field_sta_price[LANGUAGE_NONE][0]['value'])) {
                        $result['price'] = $entity_details[$form_state['values']['step2']['type_avto']]->field_sta_price[LANGUAGE_NONE][0]['value'];
                        $result['type_avto'] = $entity_details[$form_state['values']['step2']['type_avto']]->field_sta_name[LANGUAGE_NONE][0]['value'];

                        if (!empty($form_state['values']['step2']['distance']) && !empty($entity_details[$form_state['values']['step2']['type_avto']]->field_sta_add_price[LANGUAGE_NONE][0]['value'])) {
                            $result['price'] += (float) $form_state['values']['step2']['distance'] * $entity_details[$form_state['values']['step2']['type_avto']]->field_sta_add_price[LANGUAGE_NONE][0]['value'];
                        }

                        $form['step3']['result'] = array(
                            '#markup' => '<p>Цена ' . $result['price'] . 'грн.' . $material_params->name . '" с доставкой автомобилем ' . $result['type_avto'] . '</p>'
                        );
                    }
                    break;
                case 'Гранотсев':
                case 'Керамзит':
                    $entity_details = entity_load('field_collection_item', array($form_state['values']['step2']['kol_kubov_options']));

                    if (!empty($entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'])) {
                        $result['kol_kubov'] = $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'];
                        $result['type_avto'] = $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_ta_name[LANGUAGE_NONE][0]['value'];
                        $result['material_price'] = $material_params->field_stoimaterial_price[LANGUAGE_NONE][0]['value'];

                        $material_sum_price = ($result['kol_kubov'] * $result['material_price']);
                        $result['price'] = $material_sum_price + $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_price[LANGUAGE_NONE][0]['value'];

                        if (!empty($form_state['values']['step2']['distance']) && !empty($entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_add_price[LANGUAGE_NONE][0]['value'])) {
                            $result['price'] += (float) $form_state['values']['step2']['distance'] * $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_add_price[LANGUAGE_NONE][0]['value'];
                        }

                        $form['step3']['result'] = array(
                            '#markup' => '<p>Cтоимость ' . $result['kol_kubov'] . ' кубов  "' . $material_params->name . '" по цене ' . $result['material_price'] . ' грн/куб с доставкой автомобилем "' . $result['type_avto'] . '" ' . ($result['price'] - $material_sum_price) . ' грн. составляет <strong>' . $result['price'] . ' грн</strong></p>'
                        );
                    }
                    break;
                case 'Щебень':
                    $entity_details = entity_load('field_collection_item', array($form_state['values']['step2']['kol_kubov_options']));

                    if (!empty($entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'])) {
                        $result['kol_kubov'] = $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_kol_kubov[LANGUAGE_NONE][0]['value'];
                        $result['type_avto'] = $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_ta_name[LANGUAGE_NONE][0]['value'];

                        $entity_details_size = entity_load('field_collection_item', array($form_state['values']['step2']['size_options']));

                        $result['material_size'] = $entity_details_size[$form_state['values']['step2']['size_options']]->field_ss_name[LANGUAGE_NONE][0]['value'];
                        $result['material_price'] = $entity_details_size[$form_state['values']['step2']['size_options']]->field_ss_price[LANGUAGE_NONE][0]['value'];

                        $material_sum_price = ($result['kol_kubov'] * $result['material_price']);
                        $result['price'] = $material_sum_price + $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_price[LANGUAGE_NONE][0]['value'];

                        if (!empty($form_state['values']['step2']['distance']) && !empty($entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_add_price[LANGUAGE_NONE][0]['value'])) {
                            $result['price'] += (float) $form_state['values']['step2']['distance'] * $entity_details[$form_state['values']['step2']['kol_kubov_options']]->field_skk_add_price[LANGUAGE_NONE][0]['value'];
                        }

                        $form['step3']['result'] = array(
                            '#markup' => '<p>Cтоимость ' . $result['kol_kubov'] . ' кубов  "' . $material_params->name . '" (' . $result['material_size'] . ') по цене ' . $result['material_price'] . ' грн/куб с доставкой автомобилем "' . $result['type_avto'] . '" ' . ($result['price'] - $material_sum_price) . ' грн. составляет <strong>' . $result['price'] . ' грн</strong></p>'
                        );
                    }
                    break;
                case 'Цемент':                    
                    $result['kol_meshkov'] = (int) $form_state['values']['step2']['kol_meshkov_options'];

                    if (!empty($material_params->field_stoimaterial_kol_meshkov[LANGUAGE_NONE]) && count($material_params->field_stoimaterial_kol_meshkov[LANGUAGE_NONE])) {
                        foreach ($material_params->field_stoimaterial_kol_meshkov[LANGUAGE_NONE] as $entity) {
                            $entity_details = entity_load('field_collection_item', array($entity['value']));

                            if (!empty($entity_details[$entity['value']]->field_skm_kol_meshkov_from[LANGUAGE_NONE][0]['value']) &&
                                    !empty($entity_details[$entity['value']]->field_skm_kol_meshkov_to[LANGUAGE_NONE][0]['value']) &&
                                    ($result['kol_meshkov'] >= (int) $entity_details[$entity['value']]->field_skm_kol_meshkov_from[LANGUAGE_NONE][0]['value'] &&
                                    (int) $result['kol_meshkov'] <= $entity_details[$entity['value']]->field_skm_kol_meshkov_to[LANGUAGE_NONE][0]['value'])) {

                                $result['kol_meshkov_entity_id'] = $entity['value'];
                                break;
                            }
                        }
                    }

                    if (empty($result['kol_meshkov_entity_id'])) {                        
                        return;
                    }

                    $entity_details = entity_load('field_collection_item', array($result['kol_meshkov_entity_id']));

                    if (!empty($entity_details[$result['kol_meshkov_entity_id']]->field_skm_kol_meshkov_from[LANGUAGE_NONE][0]['value']) && !empty($entity_details[$result['kol_meshkov_entity_id']]->field_skm_kol_meshkov_to[LANGUAGE_NONE][0]['value'])) {
                        $result['type_avto'] = $entity_details[$result['kol_meshkov_entity_id']]->field_skm_ta_name[LANGUAGE_NONE][0]['value'];

                        $entity_details_size = entity_load('field_collection_item', array($form_state['values']['step2']['size_options']));

                        $result['material_size'] = $entity_details_size[$form_state['values']['step2']['size_options']]->field_ss_name[LANGUAGE_NONE][0]['value'];
                        $result['material_price'] = $entity_details_size[$form_state['values']['step2']['size_options']]->field_ss_price[LANGUAGE_NONE][0]['value'] - $entity_details[$result['kol_meshkov_entity_id']]->field_skm_discount[LANGUAGE_NONE][0]['value'];
                       
                        $material_sum_price = ($result['kol_meshkov'] * $result['material_price']);
                        $result['price'] = $material_sum_price + $entity_details[$result['kol_meshkov_entity_id']]->field_skm_price[LANGUAGE_NONE][0]['value'];
                        
                        if (!empty($form_state['values']['step2']['distance']) && !empty($entity_details[$result['kol_meshkov_entity_id']]->field_skm_add_price[LANGUAGE_NONE][0]['value'])) {
                            $result['price'] += (float) $form_state['values']['step2']['distance'] * $entity_details[$result['kol_meshkov_entity_id']]->field_skm_add_price[LANGUAGE_NONE][0]['value'];
                        }

                        $form['step3']['result'] = array(
                            '#markup' => '<p>Cтоимость ' . $result['kol_meshkov'] . ' мешков  "' . $material_params->name . '" (' . $result['material_size'] . ') <br/>по цене ' . $result['material_price'] . ' грн/меш с доставкой автомобилем "' . $result['type_avto'] . '" ' . ($result['price'] - $material_sum_price) . ' грн. составляет <strong>' . $result['price'] . ' грн</strong></p>'
                        );
                    }
                    break;
                default:
                    drupal_set_message(t('Для выбраного строиматериала услуга временно не доступна'), 'warning');
                    break;
            }
            break;
    }

    $form['actions'] = array('#type' => 'actions');

    /*
      if ($step == 3) {
      $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Хватит',
      );
      } */

    if ($step > 1 && $step < 3) {
        $form['actions']['prev'] = array(
            '#type' => 'submit',
            '#value' => 'Предыдущий шаг',
            '#limit_validation_errors' => array(),
            '#submit' => array('stroirs_panel_form_submit'),
            '#ajax' => array(
                'wrapper' => 'stroirs-panel-form-wrapper',
                'callback' => 'stroirs_panel_form_ajax_callback',
            ),
        );
    }

    if ($step < 3) {
        $form['actions']['next'] = array(
            '#type' => 'submit',
            '#value' => 'Следующий шаг',
            '#ajax' => array(
                'wrapper' => 'stroirs-panel-form-wrapper',
                'callback' => 'stroirs_panel_form_ajax_callback',
            ),
        );
    }

    return $form;
}

function stroirs_panel_form_submit($form, &$form_state) {
    $current_step = 'step' . $form_state['storage']['step'];
    if (!empty($form_state['values'][$current_step])) {
        $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
    }

    if (isset($form['actions']['next']['#value']) && $form_state['triggering_element']['#value'] == $form['actions']['next']['#value']) {
        $form_state['storage']['step']++;

        $step_name = 'step' . $form_state['storage']['step'];
        if (!empty($form_state['storage']['values'][$step_name])) {
            $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
        }
    }


    if (isset($form['actions']['prev']['#value']) && $form_state['triggering_element']['#value'] == $form['actions']['prev']['#value']) {
        $form_state['storage']['step']--;

        $step_name = 'step' . $form_state['storage']['step'];
        $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }

    /*
      if (isset($form['actions']['submit']['#value']) && $form_state['triggering_element']['#value'] == $form['actions']['submit']['#value']) {

      $message = 'Введённые данные: <br/>';
      foreach ($form_state['storage']['values'] as $step => $values) {
      $message .= "<br/>$step: <br/>";
      foreach ($values as $key => $value) {
      $output = '';
      if (is_array($value)) {
      foreach ($value as $val) {
      $output .= $val ? $val . '; ' : '';
      }
      $value = implode(', ', $value);
      } else {
      $output = $value;
      }
      $message .= "$key = $output<br/>";
      }
      }
      drupal_set_message($message);
      $form_state['rebuild'] = FALSE;
      return;
      }
     */

    $form_state['rebuild'] = TRUE;
}